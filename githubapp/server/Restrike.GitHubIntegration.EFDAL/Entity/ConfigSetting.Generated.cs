//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.ComponentModel;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Restrike.GitHubIntegration.EFDAL.Entity
{
	/// <summary>
	/// The 'ConfigSetting' entity
	/// Store global settings
	/// </summary>
	[System.ComponentModel.Description("Store global settings")]
	[System.CodeDom.Compiler.GeneratedCode("nHydrate", "0.0.0")]
	[FieldNameConstants(typeof(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants))]
	public partial class ConfigSetting : Restrike.GitHubIntegration.EFDAL.IBusinessObject, System.ICloneable, Restrike.GitHubIntegration.EFDAL.IAuditable, Restrike.GitHubIntegration.EFDAL.ICreatable
	{
		public readonly struct MaxLengthValues
		{
			public const int Name = 50;
			public const int Text = int.MaxValue;
		}

		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'ConfigSetting' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'ID' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.DataAnnotations.Editable(false)]
			[System.ComponentModel.Description("Field mapping for the 'ID' property")]
			ID,
			/// <summary>
			/// Field mapping for the 'Name' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Name' property")]
			Name,
			/// <summary>
			/// Field mapping for the 'Text' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Text' property")]
			Text,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ConfigSetting entity
		/// </summary>
		public ConfigSetting()
		{
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'ConfigSetting.ID' field.
		/// </summary>
		/// <remarks>Field: [ConfigSetting].[ID], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[System.ComponentModel.DataAnnotations.Display(Name = "ID")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int ID
		{
			get { return _iD; }
			protected internal set
			{
				if (value == _iD) return;
				_iD = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ConfigSetting.Name' field.
		/// </summary>
		/// <remarks>Field: [ConfigSetting].[Name], Field Length: 50, Not Nullable</remarks>
		[System.ComponentModel.DataAnnotations.Display(Name = "Name")]
		[System.ComponentModel.DataAnnotations.StringLength(MaxLengthValues.Name)]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Name
		{
			get { return _name; }
			set
			{
				if (value == null) throw new Exception(GlobalValues.ERROR_PROPERTY_SETNULL);
				if ((value != null) && (value.Length > GetMaxLength(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Name))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "ConfigSetting.Name", GetMaxLength(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Name)));
				if (value == _name) return;
				_name = value;
			}
		}

		/// <summary>
		/// The property that maps back to the database 'ConfigSetting.Text' field.
		/// </summary>
		/// <remarks>Field: [ConfigSetting].[Text], Field Length: max, Not Nullable</remarks>
		[System.ComponentModel.DataAnnotations.Display(Name = "Text")]
		[StringLengthUnbounded]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Text
		{
			get { return _text; }
			set
			{
				if (value == null) throw new Exception(GlobalValues.ERROR_PROPERTY_SETNULL);
				if ((value != null) && (value.Length > GetMaxLength(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Text))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "ConfigSetting.Text", GetMaxLength(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Text)));
				if (value == _text) return;
				_text = value;
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		[System.Diagnostics.DebuggerNonUserCode()]
		[AuditCreatedBy]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				_createdby = value;
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		[System.Diagnostics.DebuggerNonUserCode()]
		[AuditCreatedDate(utc: false)]
		public virtual DateTime CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				_createddate = value;
			}
		}

		/// <summary />
		protected DateTime _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		[System.Diagnostics.DebuggerNonUserCode()]
		[AuditModifiedBy]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				_modifiedby = value;
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		[System.Diagnostics.DebuggerNonUserCode()]
		[AuditModifiedDate(utc: false)]
		public virtual DateTime ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				_modifieddate = value;
			}
		}

		/// <summary />
		protected DateTime _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(EditorBrowsableState.Never)]
		[System.Diagnostics.DebuggerNonUserCode()]
		[AuditTimestamp]
		[System.ComponentModel.DataAnnotations.ConcurrencyCheck()]
		protected internal int __concurrency
		{
			get { return _concurrency; }
			set
			{
				_concurrency = value;
			}
		}

		/// <summary />
		protected int _concurrency;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _iD;
		/// <summary />
		protected string _name;
		/// <summary />
		protected string _text;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants field)
		{
			switch (field)
			{
				case Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.ID:
					return 0; //Type=Int
				case Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Name:
					return MaxLengthValues.Name;
				case Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Text:
					return int.MaxValue;
			}
			return 0;
		}

		int Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field) => GetMaxLength((Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants)field);

		#endregion

		#region GetFieldNameConstants

		System.Type Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants() => typeof(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants);

		#endregion

		#region Get/Set Value

		object Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants'.");
			return this.GetValue((Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants)field, defaultValue);
		}

		void Restrike.GitHubIntegration.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants'.");
			this.SetValue((Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants)field, newValue);
		}

		void Restrike.GitHubIntegration.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants'.");
			this.SetValue((Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Restrike.GitHubIntegration.EFDAL.IPrimaryKey Restrike.GitHubIntegration.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("ConfigSetting", this.ID)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		object ICloneable.Clone() => Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.Clone(this);

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static ConfigSetting Clone(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting item)
		{
			var newItem = new ConfigSetting();
			newItem.ID = item.ID;
			newItem.Name = item.Name;
			newItem.Text = item.Text;
			newItem.CreatedDate = item.CreatedDate;
			newItem.CreatedBy = item.CreatedBy;
			newItem.ModifiedDate = item.ModifiedDate;
			newItem.ModifiedBy = item.ModifiedBy;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		protected virtual object GetValue(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		protected virtual object GetValue(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants field, object defaultValue)
		{
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.ID)
				return this.ID;
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Name)
				return this.Name;
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Text)
				return this.Text;
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.CreatedDate)
				return this.CreatedDate;
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.ModifiedDate)
				return this.ModifiedDate;
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		protected virtual void SetValue(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		protected virtual void SetValue(Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.ID)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Name)
			{
				this.Name = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting.FieldNameConstants.Text)
			{
				this.Text = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Auditing
		string Restrike.GitHubIntegration.EFDAL.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
			set { this.CreatedBy = value; }
		}

		System.DateTime? Restrike.GitHubIntegration.EFDAL.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
			set { if (value == null) throw new Exception("Invalid Date"); this.CreatedDate = (DateTime)value; }
		}

		string Restrike.GitHubIntegration.EFDAL.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
			set { this.ModifiedBy = value; }
		}

		System.DateTime? Restrike.GitHubIntegration.EFDAL.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
			set { if (value == null) throw new Exception("Invalid Date"); this.ModifiedDate = (DateTime)value; }
		}

		int Restrike.GitHubIntegration.EFDAL.IAuditable.Concurrency
		{
			get { return this.__concurrency; }
			set { this.__concurrency = value; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'ConfigSetting' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Restrike.GitHubIntegration.EFDAL.Entity.ConfigSetting;
			if (other == null) return false;
			return (
				other.ID == this.ID &&
				other.Name == this.Name &&
				other.Text == this.Text
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode() => base.GetHashCode();

		#endregion

	}
}

#pragma warning restore 612

