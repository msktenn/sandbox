//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Text;
using System.Xml.XPath;
using System.Xml;
using System.IO;

namespace Restrike.GitHubIntegration.PostgresInstall
{
    /// <summary>
    /// A helper class to manage XML documents
    /// </summary>
    internal static class XmlHelper
    {
        /// <summary>
        /// Get a node's value based on an XPath query
        /// </summary>
        /// <param name="element"></param>
        /// <param name="xpath"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        public static string GetNodeValue(this System.Xml.XmlNode element, string xpath, string defaultValue)
        {
            System.Xml.XmlNode node = null;
            node = element.SelectSingleNode(xpath);
            if (node == null) return defaultValue;
            else return node.InnerText;
        }

        /// <summary>
        /// Get a node's value based on an XPath query
        /// </summary>
        /// <param name="element"></param>
        /// <param name="xpath"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        public static bool GetNodeValue(this System.Xml.XmlNode element, string xpath, bool defaultValue)
        {
            var b = element.GetNodeValue(xpath, (bool?)defaultValue);
            if (b == null) return defaultValue;
            else return b.Value;
        }

        /// <summary>
        /// Get a node's value based on an XPath query
        /// </summary>
        /// <param name="element"></param>
        /// <param name="xpath"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        public static bool? GetNodeValue(this System.Xml.XmlNode element, string xpath, bool? defaultValue)
        {
            var node = element.SelectSingleNode(xpath);
            if (node == null) return defaultValue;
            else
            {
                var v = node.InnerText.ToLower();
                bool newv;
                if (bool.TryParse(v, out newv))
                    return newv;
                return defaultValue;
            }
        }

        /// <summary>
        /// Adds a node to the XML tree
        /// </summary>
        /// <param name="element"></param>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static XmlNode AddElement(this XmlElement element, string name, string value)
        {
            XmlDocument document = null;
            XmlElement newItem = null;

            document = element.OwnerDocument;
            newItem = document.CreateElement(name);
            if (value != null)
            {
                if (value.GetType() == typeof(string))
                {
                    if (!string.IsNullOrEmpty(value))
                        newItem.InnerText = value;
                }
                else
                    newItem.InnerText = value;
            }

            return element.AppendChild(newItem);
        }

    }
}